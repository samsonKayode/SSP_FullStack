version: '3.6'
services:
  Elasticsearch:
    image: elasticsearch:8.8.1
    container_name: elasticsearch
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - network.host=0.0.0.0
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - elk

  Logstash:
    image: logstash:8.8.1
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf
    depends_on:
      - Elasticsearch
    ports:
      - '9600:9600'
      - '12210:12210'
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - xpack.monitoring.enabled=true
    networks:
      - elk

  Kibana:
    image: kibana:8.8.1
    container_name: kibana
    restart: always
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - Elasticsearch
    networks:
      - elk

  Prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  Grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'

  mysqldb:
    image: "mysql:8.0"
    restart: always
    ports:
      - 3307:3306
    networks:
      - springapimysql-net
    environment:
      MYSQL_DATABASE: ssp
      MYSQL_USER: hbstudent
      MYSQL_PASSWORD: hbstudent
      MYSQL_ROOT_PASSWORD: test

  ssp-backend:
    depends_on:
      - mysqldb
    build: .
    container_name: ssp-backend
    ports:
      - '8080:8080'
    environment:
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/ssp?allowPublicKeyRetrieval=true
    networks:
      - springapimysql-net
      - ssp-game

##This would only work if the front end directory is available in a ../Frontend of the backend folder
  ssp-frontend:
    build: ../Frontend
    container_name: ssp-frontend
    ports:
      - 80:80
    networks:
      - ssp-game


volumes:
  elastic_data: {}
  db:

networks:
  elk:
  springapimysql-net:
  ssp-game: